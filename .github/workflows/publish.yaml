name: create-publish-release

on:
  workflow_dispatch:
  # inputs:
  #   version_bump:
  #     description: "Type of version bump"
  #     required: true
  #     default: "patch"
  #     type: choice
  #     options:
  #       - patch
  #       - minor
  #       - major
  # pull_request:
  #   types: [reopened, opened, synchronize, edited]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        # with:
        #   ref: ${{ github.head_ref }} # Explicitly check out the source branch of the PR

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # - name: Configure Git user with GitHub Actor
      #   run: |
      #     git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      #     git config --global user.name "${GITHUB_ACTOR}"

      # # Bump the version based on the input ('patch', 'minor', 'major')
      # - name: Bump version
      #   run: |
      #     echo "Bumping version to ${{ inputs.version_bump }}"
      #     npm version ${{ inputs.version_bump }} -m "Bump version %s" # Bumps version and creates a new Git commit
      #     git add package.json  # Stage changes to package.json
      #     git commit -m "Bump version to $(node -p -e "require('./package.json').version")" || echo "No changes to commit"
      #     git push

      # Set the version_date variable based on package.json and current date
      - name: Set version and date variables
        run: |
          echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Output version and date to confirm
      - name: Output version and date
        run: |
          echo "Current version is ${{ env.VERSION }} and Date is ${{ env.DATE }}"

      # Create a Git tag and push the tag
      - name: Create and push Git tag
        run: |
          git tag "v${{ env.VERSION }}"  # Directly use the "v" prefix in git tag
          git push origin "v${{ env.VERSION }}"  # Push the new tag to the remote repository

      # Generate a changelog based on the commits since the last release
      - name: Build Changelog
        id: build_changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Create a release based on the tag and changelog
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }} ${{ env.DATE }}
          body: ${{ steps.build_changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish to GitHub Packages
      - name: Publish package to GitHub Packages
        run: |
          npm publish  # Publish to GitHub Packages (private registry)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the automatically available GITHUB_TOKEN
